// Copyright (c) 2022 Arista Networks, Inc.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: healthzdata.proto

package healthzdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A HealthzData message is returned in the GNOI Healthz RPC,
// to satisfy the ComponentStatus.healthz field, which is described as:
// ```
// Opaque data for how the healthcheck is implemented.  This can be any
// proto defined by the vendor.  This could be the equivalent to outputs
// like "show tech" or core files or any other diagnostic data.
// ```
// The size of the message may be large.
// Ensure that the client is configured to receive large message sizes.
type HealthzData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// healthzdata.proto version number
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// data points collected for a component
	DataPoints []*HealthzDataPoint `protobuf:"bytes,2,rep,name=data_points,json=dataPoints,proto3" json:"data_points,omitempty"`
}

func (x *HealthzData) Reset() {
	*x = HealthzData{}
	mi := &file_healthzdata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthzData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthzData) ProtoMessage() {}

func (x *HealthzData) ProtoReflect() protoreflect.Message {
	mi := &file_healthzdata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthzData.ProtoReflect.Descriptor instead.
func (*HealthzData) Descriptor() ([]byte, []int) {
	return file_healthzdata_proto_rawDescGZIP(), []int{0}
}

func (x *HealthzData) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *HealthzData) GetDataPoints() []*HealthzDataPoint {
	if x != nil {
		return x.DataPoints
	}
	return nil
}

// A HealthzDataPoint represents data from one source
// that relates to a component.
// For example, the data relating to one 'show' command.
// If multiple sources are being used to collect data,
// each one will be captured in its own datapoint.
type HealthzDataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Datapoint:
	//
	//	*HealthzDataPoint_ShowCommand
	//	*HealthzDataPoint_SupportScript
	//	*HealthzDataPoint_Logs
	//	*HealthzDataPoint_BashCommand
	Datapoint isHealthzDataPoint_Datapoint `protobuf_oneof:"datapoint"`
}

func (x *HealthzDataPoint) Reset() {
	*x = HealthzDataPoint{}
	mi := &file_healthzdata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthzDataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthzDataPoint) ProtoMessage() {}

func (x *HealthzDataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_healthzdata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthzDataPoint.ProtoReflect.Descriptor instead.
func (*HealthzDataPoint) Descriptor() ([]byte, []int) {
	return file_healthzdata_proto_rawDescGZIP(), []int{1}
}

func (m *HealthzDataPoint) GetDatapoint() isHealthzDataPoint_Datapoint {
	if m != nil {
		return m.Datapoint
	}
	return nil
}

func (x *HealthzDataPoint) GetShowCommand() *ShowCommand {
	if x, ok := x.GetDatapoint().(*HealthzDataPoint_ShowCommand); ok {
		return x.ShowCommand
	}
	return nil
}

func (x *HealthzDataPoint) GetSupportScript() *SupportScript {
	if x, ok := x.GetDatapoint().(*HealthzDataPoint_SupportScript); ok {
		return x.SupportScript
	}
	return nil
}

func (x *HealthzDataPoint) GetLogs() *Logs {
	if x, ok := x.GetDatapoint().(*HealthzDataPoint_Logs); ok {
		return x.Logs
	}
	return nil
}

func (x *HealthzDataPoint) GetBashCommand() *BashCommand {
	if x, ok := x.GetDatapoint().(*HealthzDataPoint_BashCommand); ok {
		return x.BashCommand
	}
	return nil
}

type isHealthzDataPoint_Datapoint interface {
	isHealthzDataPoint_Datapoint()
}

type HealthzDataPoint_ShowCommand struct {
	ShowCommand *ShowCommand `protobuf:"bytes,1,opt,name=show_command,json=showCommand,proto3,oneof"`
}

type HealthzDataPoint_SupportScript struct {
	SupportScript *SupportScript `protobuf:"bytes,2,opt,name=support_script,json=supportScript,proto3,oneof"`
}

type HealthzDataPoint_Logs struct {
	Logs *Logs `protobuf:"bytes,3,opt,name=logs,proto3,oneof"`
}

type HealthzDataPoint_BashCommand struct {
	BashCommand *BashCommand `protobuf:"bytes,4,opt,name=bash_command,json=bashCommand,proto3,oneof"`
}

func (*HealthzDataPoint_ShowCommand) isHealthzDataPoint_Datapoint() {}

func (*HealthzDataPoint_SupportScript) isHealthzDataPoint_Datapoint() {}

func (*HealthzDataPoint_Logs) isHealthzDataPoint_Datapoint() {}

func (*HealthzDataPoint_BashCommand) isHealthzDataPoint_Datapoint() {}

// A Logs datapoint captures information from one or more
// log files on the system.
type Logs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogsDescription string `protobuf:"bytes,1,opt,name=logs_description,json=logsDescription,proto3" json:"logs_description,omitempty"`
	// data is a .tar.gz archive containing log file(s)
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Logs) Reset() {
	*x = Logs{}
	mi := &file_healthzdata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logs) ProtoMessage() {}

func (x *Logs) ProtoReflect() protoreflect.Message {
	mi := &file_healthzdata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logs.ProtoReflect.Descriptor instead.
func (*Logs) Descriptor() ([]byte, []int) {
	return file_healthzdata_proto_rawDescGZIP(), []int{2}
}

func (x *Logs) GetLogsDescription() string {
	if x != nil {
		return x.LogsDescription
	}
	return ""
}

func (x *Logs) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// A ShowCommand datapoint captures information from
// running a CLI show command on the system
type ShowCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowCommand string `protobuf:"bytes,1,opt,name=show_command,json=showCommand,proto3" json:"show_command,omitempty"`
	// data is a .tar.gz archive containing
	// a JSON or text file with show command output
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ShowCommand) Reset() {
	*x = ShowCommand{}
	mi := &file_healthzdata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCommand) ProtoMessage() {}

func (x *ShowCommand) ProtoReflect() protoreflect.Message {
	mi := &file_healthzdata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCommand.ProtoReflect.Descriptor instead.
func (*ShowCommand) Descriptor() ([]byte, []int) {
	return file_healthzdata_proto_rawDescGZIP(), []int{3}
}

func (x *ShowCommand) GetShowCommand() string {
	if x != nil {
		return x.ShowCommand
	}
	return ""
}

func (x *ShowCommand) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// A SupportScript datapoint captures information
// from running an existing support script
// on the system.
type SupportScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptName string `protobuf:"bytes,1,opt,name=script_name,json=scriptName,proto3" json:"script_name,omitempty"`
	// data is a .tar.gz archive containing file(s)
	// generated by the support script
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SupportScript) Reset() {
	*x = SupportScript{}
	mi := &file_healthzdata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SupportScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportScript) ProtoMessage() {}

func (x *SupportScript) ProtoReflect() protoreflect.Message {
	mi := &file_healthzdata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportScript.ProtoReflect.Descriptor instead.
func (*SupportScript) Descriptor() ([]byte, []int) {
	return file_healthzdata_proto_rawDescGZIP(), []int{4}
}

func (x *SupportScript) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *SupportScript) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// A BashCommand datapoint captures information
// from running some bash command on the system.
type BashCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// data is a .tar.gz archive containing any output from
	// running the bash command on the system
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BashCommand) Reset() {
	*x = BashCommand{}
	mi := &file_healthzdata_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BashCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BashCommand) ProtoMessage() {}

func (x *BashCommand) ProtoReflect() protoreflect.Message {
	mi := &file_healthzdata_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BashCommand.ProtoReflect.Descriptor instead.
func (*BashCommand) Descriptor() ([]byte, []int) {
	return file_healthzdata_proto_rawDescGZIP(), []int{5}
}

func (x *BashCommand) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *BashCommand) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_healthzdata_proto protoreflect.FileDescriptor

var file_healthzdata_proto_rawDesc = []byte{
	0x0a, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0xdb, 0x01, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x6f,
	0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x1b, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x31,
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x45,
	0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x0d, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x3b, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_healthzdata_proto_rawDescOnce sync.Once
	file_healthzdata_proto_rawDescData = file_healthzdata_proto_rawDesc
)

func file_healthzdata_proto_rawDescGZIP() []byte {
	file_healthzdata_proto_rawDescOnce.Do(func() {
		file_healthzdata_proto_rawDescData = protoimpl.X.CompressGZIP(file_healthzdata_proto_rawDescData)
	})
	return file_healthzdata_proto_rawDescData
}

var file_healthzdata_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_healthzdata_proto_goTypes = []any{
	(*HealthzData)(nil),      // 0: HealthzData
	(*HealthzDataPoint)(nil), // 1: HealthzDataPoint
	(*Logs)(nil),             // 2: Logs
	(*ShowCommand)(nil),      // 3: ShowCommand
	(*SupportScript)(nil),    // 4: SupportScript
	(*BashCommand)(nil),      // 5: BashCommand
}
var file_healthzdata_proto_depIdxs = []int32{
	1, // 0: HealthzData.data_points:type_name -> HealthzDataPoint
	3, // 1: HealthzDataPoint.show_command:type_name -> ShowCommand
	4, // 2: HealthzDataPoint.support_script:type_name -> SupportScript
	2, // 3: HealthzDataPoint.logs:type_name -> Logs
	5, // 4: HealthzDataPoint.bash_command:type_name -> BashCommand
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_healthzdata_proto_init() }
func file_healthzdata_proto_init() {
	if File_healthzdata_proto != nil {
		return
	}
	file_healthzdata_proto_msgTypes[1].OneofWrappers = []any{
		(*HealthzDataPoint_ShowCommand)(nil),
		(*HealthzDataPoint_SupportScript)(nil),
		(*HealthzDataPoint_Logs)(nil),
		(*HealthzDataPoint_BashCommand)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_healthzdata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_healthzdata_proto_goTypes,
		DependencyIndexes: file_healthzdata_proto_depIdxs,
		MessageInfos:      file_healthzdata_proto_msgTypes,
	}.Build()
	File_healthzdata_proto = out.File
	file_healthzdata_proto_rawDesc = nil
	file_healthzdata_proto_goTypes = nil
	file_healthzdata_proto_depIdxs = nil
}
