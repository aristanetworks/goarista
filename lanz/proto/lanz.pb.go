// Copyright (c) 2011 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.
//
// This Google Protocol Buffer schema contains the message
// that are used for Lanz streaming.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: lanz.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GlobalBufferUsageRecord_EntryType int32

const (
	GlobalBufferUsageRecord_LOW    GlobalBufferUsageRecord_EntryType = 1
	GlobalBufferUsageRecord_UPDATE GlobalBufferUsageRecord_EntryType = 2
	GlobalBufferUsageRecord_HIGH   GlobalBufferUsageRecord_EntryType = 3
)

// Enum value maps for GlobalBufferUsageRecord_EntryType.
var (
	GlobalBufferUsageRecord_EntryType_name = map[int32]string{
		1: "LOW",
		2: "UPDATE",
		3: "HIGH",
	}
	GlobalBufferUsageRecord_EntryType_value = map[string]int32{
		"LOW":    1,
		"UPDATE": 2,
		"HIGH":   3,
	}
)

func (x GlobalBufferUsageRecord_EntryType) Enum() *GlobalBufferUsageRecord_EntryType {
	p := new(GlobalBufferUsageRecord_EntryType)
	*p = x
	return p
}

func (x GlobalBufferUsageRecord_EntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GlobalBufferUsageRecord_EntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_lanz_proto_enumTypes[0].Descriptor()
}

func (GlobalBufferUsageRecord_EntryType) Type() protoreflect.EnumType {
	return &file_lanz_proto_enumTypes[0]
}

func (x GlobalBufferUsageRecord_EntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GlobalBufferUsageRecord_EntryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GlobalBufferUsageRecord_EntryType(num)
	return nil
}

// Deprecated: Use GlobalBufferUsageRecord_EntryType.Descriptor instead.
func (GlobalBufferUsageRecord_EntryType) EnumDescriptor() ([]byte, []int) {
	return file_lanz_proto_rawDescGZIP(), []int{1, 0}
}

type CongestionRecord_EntryType int32

const (
	CongestionRecord_START   CongestionRecord_EntryType = 1
	CongestionRecord_UPDATE  CongestionRecord_EntryType = 2
	CongestionRecord_END     CongestionRecord_EntryType = 3
	CongestionRecord_POLLING CongestionRecord_EntryType = 4
)

// Enum value maps for CongestionRecord_EntryType.
var (
	CongestionRecord_EntryType_name = map[int32]string{
		1: "START",
		2: "UPDATE",
		3: "END",
		4: "POLLING",
	}
	CongestionRecord_EntryType_value = map[string]int32{
		"START":   1,
		"UPDATE":  2,
		"END":     3,
		"POLLING": 4,
	}
)

func (x CongestionRecord_EntryType) Enum() *CongestionRecord_EntryType {
	p := new(CongestionRecord_EntryType)
	*p = x
	return p
}

func (x CongestionRecord_EntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CongestionRecord_EntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_lanz_proto_enumTypes[1].Descriptor()
}

func (CongestionRecord_EntryType) Type() protoreflect.EnumType {
	return &file_lanz_proto_enumTypes[1]
}

func (x CongestionRecord_EntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CongestionRecord_EntryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CongestionRecord_EntryType(num)
	return nil
}

// Deprecated: Use CongestionRecord_EntryType.Descriptor instead.
func (CongestionRecord_EntryType) EnumDescriptor() ([]byte, []int) {
	return file_lanz_proto_rawDescGZIP(), []int{2, 0}
}

type ConfigRecord struct {
	state                       protoimpl.MessageState           `protogen:"open.v1"`
	Timestamp                   *uint64                          `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`                                     // Time of change in configuration in micro-seconds (UTC)
	LanzVersion                 *uint32                          `protobuf:"varint,2,req,name=lanzVersion" json:"lanzVersion,omitempty"`                                 // LANZ feature version
	NumOfPorts                  *uint32                          `protobuf:"varint,3,req,name=numOfPorts" json:"numOfPorts,omitempty"`                                   // Num of ports in the switch
	SegmentSize                 *uint32                          `protobuf:"varint,4,req,name=segmentSize" json:"segmentSize,omitempty"`                                 // Segement size
	MaxQueueSize                *uint32                          `protobuf:"varint,5,req,name=maxQueueSize" json:"maxQueueSize,omitempty"`                               // Maximum queue size in segments
	QLenInterval                *uint32                          `protobuf:"varint,10,opt,name=qLenInterval" json:"qLenInterval,omitempty"`                              // Frequency of update
	PortConfigRecord            []*ConfigRecord_PortConfigRecord `protobuf:"bytes,6,rep,name=portConfigRecord" json:"portConfigRecord,omitempty"`                        // Lanz config details of each port
	GlobalUsageHighThreshold    *uint32                          `protobuf:"varint,7,opt,name=globalUsageHighThreshold" json:"globalUsageHighThreshold,omitempty"`       // High threshold for global usage monitoring
	GlobalUsageLowThreshold     *uint32                          `protobuf:"varint,8,opt,name=globalUsageLowThreshold" json:"globalUsageLowThreshold,omitempty"`         // Low threshold for global usage monitoring
	GlobalUsageReportingEnabled *bool                            `protobuf:"varint,9,opt,name=globalUsageReportingEnabled" json:"globalUsageReportingEnabled,omitempty"` // Global buffer reporting enabled
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *ConfigRecord) Reset() {
	*x = ConfigRecord{}
	mi := &file_lanz_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRecord) ProtoMessage() {}

func (x *ConfigRecord) ProtoReflect() protoreflect.Message {
	mi := &file_lanz_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRecord.ProtoReflect.Descriptor instead.
func (*ConfigRecord) Descriptor() ([]byte, []int) {
	return file_lanz_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigRecord) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *ConfigRecord) GetLanzVersion() uint32 {
	if x != nil && x.LanzVersion != nil {
		return *x.LanzVersion
	}
	return 0
}

func (x *ConfigRecord) GetNumOfPorts() uint32 {
	if x != nil && x.NumOfPorts != nil {
		return *x.NumOfPorts
	}
	return 0
}

func (x *ConfigRecord) GetSegmentSize() uint32 {
	if x != nil && x.SegmentSize != nil {
		return *x.SegmentSize
	}
	return 0
}

func (x *ConfigRecord) GetMaxQueueSize() uint32 {
	if x != nil && x.MaxQueueSize != nil {
		return *x.MaxQueueSize
	}
	return 0
}

func (x *ConfigRecord) GetQLenInterval() uint32 {
	if x != nil && x.QLenInterval != nil {
		return *x.QLenInterval
	}
	return 0
}

func (x *ConfigRecord) GetPortConfigRecord() []*ConfigRecord_PortConfigRecord {
	if x != nil {
		return x.PortConfigRecord
	}
	return nil
}

func (x *ConfigRecord) GetGlobalUsageHighThreshold() uint32 {
	if x != nil && x.GlobalUsageHighThreshold != nil {
		return *x.GlobalUsageHighThreshold
	}
	return 0
}

func (x *ConfigRecord) GetGlobalUsageLowThreshold() uint32 {
	if x != nil && x.GlobalUsageLowThreshold != nil {
		return *x.GlobalUsageLowThreshold
	}
	return 0
}

func (x *ConfigRecord) GetGlobalUsageReportingEnabled() bool {
	if x != nil && x.GlobalUsageReportingEnabled != nil {
		return *x.GlobalUsageReportingEnabled
	}
	return false
}

type GlobalBufferUsageRecord struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	EntryType     *GlobalBufferUsageRecord_EntryType `protobuf:"varint,1,opt,name=entryType,enum=LanzProtobuf.GlobalBufferUsageRecord_EntryType" json:"entryType,omitempty"`
	Timestamp     *uint64                            `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`   // Time of entry in micro-seconds (UTC)
	BufferSize    *uint32                            `protobuf:"varint,3,opt,name=bufferSize" json:"bufferSize,omitempty"` // Size of global buffer
	Duration      *uint32                            `protobuf:"varint,4,opt,name=duration" json:"duration,omitempty"`     // duration of buffer usage between high and low
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalBufferUsageRecord) Reset() {
	*x = GlobalBufferUsageRecord{}
	mi := &file_lanz_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalBufferUsageRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalBufferUsageRecord) ProtoMessage() {}

func (x *GlobalBufferUsageRecord) ProtoReflect() protoreflect.Message {
	mi := &file_lanz_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalBufferUsageRecord.ProtoReflect.Descriptor instead.
func (*GlobalBufferUsageRecord) Descriptor() ([]byte, []int) {
	return file_lanz_proto_rawDescGZIP(), []int{1}
}

func (x *GlobalBufferUsageRecord) GetEntryType() GlobalBufferUsageRecord_EntryType {
	if x != nil && x.EntryType != nil {
		return *x.EntryType
	}
	return GlobalBufferUsageRecord_LOW
}

func (x *GlobalBufferUsageRecord) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *GlobalBufferUsageRecord) GetBufferSize() uint32 {
	if x != nil && x.BufferSize != nil {
		return *x.BufferSize
	}
	return 0
}

func (x *GlobalBufferUsageRecord) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CongestionRecord struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	Timestamp          *uint64                     `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`                                              // Time of congestion in micro-seconds (UTC)
	IntfName           *string                     `protobuf:"bytes,2,req,name=intfName" json:"intfName,omitempty"`                                                 // Name of the port
	SwitchId           *uint32                     `protobuf:"varint,3,req,name=switchId" json:"switchId,omitempty"`                                                // Id of the chip on a multi-chip system
	PortId             *uint32                     `protobuf:"varint,4,req,name=portId" json:"portId,omitempty"`                                                    // Id of the port
	QueueSize          *uint32                     `protobuf:"varint,5,req,name=queueSize" json:"queueSize,omitempty"`                                              // Queue size in segments at time of congestion
	EntryType          *CongestionRecord_EntryType `protobuf:"varint,6,opt,name=entryType,enum=LanzProtobuf.CongestionRecord_EntryType" json:"entryType,omitempty"` // Type of entry
	TrafficClass       *uint32                     `protobuf:"varint,7,opt,name=trafficClass" json:"trafficClass,omitempty"`                                        // Traffic Class
	TimeOfMaxQLen      *uint64                     `protobuf:"varint,8,opt,name=timeOfMaxQLen" json:"timeOfMaxQLen,omitempty"`                                      // Time of max q len since congestion start
	TxLatency          *uint32                     `protobuf:"varint,9,opt,name=txLatency" json:"txLatency,omitempty"`                                              // Transmit latency
	QDropCount         *uint32                     `protobuf:"varint,10,opt,name=qDropCount" json:"qDropCount,omitempty"`                                           // Queue drop count
	FabricPeerIntfName *string                     `protobuf:"bytes,11,opt,name=fabricPeerIntfName" json:"fabricPeerIntfName,omitempty"`                            // Name of the fabric port's peer
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CongestionRecord) Reset() {
	*x = CongestionRecord{}
	mi := &file_lanz_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CongestionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CongestionRecord) ProtoMessage() {}

func (x *CongestionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_lanz_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CongestionRecord.ProtoReflect.Descriptor instead.
func (*CongestionRecord) Descriptor() ([]byte, []int) {
	return file_lanz_proto_rawDescGZIP(), []int{2}
}

func (x *CongestionRecord) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CongestionRecord) GetIntfName() string {
	if x != nil && x.IntfName != nil {
		return *x.IntfName
	}
	return ""
}

func (x *CongestionRecord) GetSwitchId() uint32 {
	if x != nil && x.SwitchId != nil {
		return *x.SwitchId
	}
	return 0
}

func (x *CongestionRecord) GetPortId() uint32 {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return 0
}

func (x *CongestionRecord) GetQueueSize() uint32 {
	if x != nil && x.QueueSize != nil {
		return *x.QueueSize
	}
	return 0
}

func (x *CongestionRecord) GetEntryType() CongestionRecord_EntryType {
	if x != nil && x.EntryType != nil {
		return *x.EntryType
	}
	return CongestionRecord_START
}

func (x *CongestionRecord) GetTrafficClass() uint32 {
	if x != nil && x.TrafficClass != nil {
		return *x.TrafficClass
	}
	return 0
}

func (x *CongestionRecord) GetTimeOfMaxQLen() uint64 {
	if x != nil && x.TimeOfMaxQLen != nil {
		return *x.TimeOfMaxQLen
	}
	return 0
}

func (x *CongestionRecord) GetTxLatency() uint32 {
	if x != nil && x.TxLatency != nil {
		return *x.TxLatency
	}
	return 0
}

func (x *CongestionRecord) GetQDropCount() uint32 {
	if x != nil && x.QDropCount != nil {
		return *x.QDropCount
	}
	return 0
}

func (x *CongestionRecord) GetFabricPeerIntfName() string {
	if x != nil && x.FabricPeerIntfName != nil {
		return *x.FabricPeerIntfName
	}
	return ""
}

type ErrorRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *uint64                `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`      // Time of event in micro-seconds (UTC)
	ErrorMessage  *string                `protobuf:"bytes,2,req,name=errorMessage" json:"errorMessage,omitempty"` // Text message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorRecord) Reset() {
	*x = ErrorRecord{}
	mi := &file_lanz_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorRecord) ProtoMessage() {}

func (x *ErrorRecord) ProtoReflect() protoreflect.Message {
	mi := &file_lanz_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorRecord.ProtoReflect.Descriptor instead.
func (*ErrorRecord) Descriptor() ([]byte, []int) {
	return file_lanz_proto_rawDescGZIP(), []int{3}
}

func (x *ErrorRecord) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *ErrorRecord) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type LanzRecord struct {
	state                   protoimpl.MessageState   `protogen:"open.v1"`
	ConfigRecord            *ConfigRecord            `protobuf:"bytes,1,opt,name=configRecord" json:"configRecord,omitempty"`
	CongestionRecord        *CongestionRecord        `protobuf:"bytes,2,opt,name=congestionRecord" json:"congestionRecord,omitempty"`
	ErrorRecord             *ErrorRecord             `protobuf:"bytes,3,opt,name=errorRecord" json:"errorRecord,omitempty"`
	GlobalBufferUsageRecord *GlobalBufferUsageRecord `protobuf:"bytes,4,opt,name=globalBufferUsageRecord" json:"globalBufferUsageRecord,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *LanzRecord) Reset() {
	*x = LanzRecord{}
	mi := &file_lanz_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LanzRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanzRecord) ProtoMessage() {}

func (x *LanzRecord) ProtoReflect() protoreflect.Message {
	mi := &file_lanz_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanzRecord.ProtoReflect.Descriptor instead.
func (*LanzRecord) Descriptor() ([]byte, []int) {
	return file_lanz_proto_rawDescGZIP(), []int{4}
}

func (x *LanzRecord) GetConfigRecord() *ConfigRecord {
	if x != nil {
		return x.ConfigRecord
	}
	return nil
}

func (x *LanzRecord) GetCongestionRecord() *CongestionRecord {
	if x != nil {
		return x.CongestionRecord
	}
	return nil
}

func (x *LanzRecord) GetErrorRecord() *ErrorRecord {
	if x != nil {
		return x.ErrorRecord
	}
	return nil
}

func (x *LanzRecord) GetGlobalBufferUsageRecord() *GlobalBufferUsageRecord {
	if x != nil {
		return x.GlobalBufferUsageRecord
	}
	return nil
}

type ConfigRecord_PortConfigRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IntfName      *string                `protobuf:"bytes,1,req,name=intfName" json:"intfName,omitempty"`            // Name of the port
	SwitchId      *uint32                `protobuf:"varint,2,req,name=switchId" json:"switchId,omitempty"`           // Id of the chip on a multi-chip system
	PortId        *uint32                `protobuf:"varint,3,req,name=portId" json:"portId,omitempty"`               // Id of the port
	InternalPort  *bool                  `protobuf:"varint,4,req,name=internalPort" json:"internalPort,omitempty"`   // 'True' if it's an internal port
	HighThreshold *uint32                `protobuf:"varint,5,req,name=highThreshold" json:"highThreshold,omitempty"` // Higher threshold
	LowThreshold  *uint32                `protobuf:"varint,6,req,name=lowThreshold" json:"lowThreshold,omitempty"`   // Lower threshold
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigRecord_PortConfigRecord) Reset() {
	*x = ConfigRecord_PortConfigRecord{}
	mi := &file_lanz_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigRecord_PortConfigRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRecord_PortConfigRecord) ProtoMessage() {}

func (x *ConfigRecord_PortConfigRecord) ProtoReflect() protoreflect.Message {
	mi := &file_lanz_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRecord_PortConfigRecord.ProtoReflect.Descriptor instead.
func (*ConfigRecord_PortConfigRecord) Descriptor() ([]byte, []int) {
	return file_lanz_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ConfigRecord_PortConfigRecord) GetIntfName() string {
	if x != nil && x.IntfName != nil {
		return *x.IntfName
	}
	return ""
}

func (x *ConfigRecord_PortConfigRecord) GetSwitchId() uint32 {
	if x != nil && x.SwitchId != nil {
		return *x.SwitchId
	}
	return 0
}

func (x *ConfigRecord_PortConfigRecord) GetPortId() uint32 {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return 0
}

func (x *ConfigRecord_PortConfigRecord) GetInternalPort() bool {
	if x != nil && x.InternalPort != nil {
		return *x.InternalPort
	}
	return false
}

func (x *ConfigRecord_PortConfigRecord) GetHighThreshold() uint32 {
	if x != nil && x.HighThreshold != nil {
		return *x.HighThreshold
	}
	return 0
}

func (x *ConfigRecord_PortConfigRecord) GetLowThreshold() uint32 {
	if x != nil && x.LowThreshold != nil {
		return *x.LowThreshold
	}
	return 0
}

var File_lanz_proto protoreflect.FileDescriptor

const file_lanz_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"lanz.proto\x12\fLanzProtobuf\"\xbc\x05\n" +
	"\fConfigRecord\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x02(\x04R\ttimestamp\x12 \n" +
	"\vlanzVersion\x18\x02 \x02(\rR\vlanzVersion\x12\x1e\n" +
	"\n" +
	"numOfPorts\x18\x03 \x02(\rR\n" +
	"numOfPorts\x12 \n" +
	"\vsegmentSize\x18\x04 \x02(\rR\vsegmentSize\x12\"\n" +
	"\fmaxQueueSize\x18\x05 \x02(\rR\fmaxQueueSize\x12\"\n" +
	"\fqLenInterval\x18\n" +
	" \x01(\rR\fqLenInterval\x12W\n" +
	"\x10portConfigRecord\x18\x06 \x03(\v2+.LanzProtobuf.ConfigRecord.PortConfigRecordR\x10portConfigRecord\x12:\n" +
	"\x18globalUsageHighThreshold\x18\a \x01(\rR\x18globalUsageHighThreshold\x128\n" +
	"\x17globalUsageLowThreshold\x18\b \x01(\rR\x17globalUsageLowThreshold\x12@\n" +
	"\x1bglobalUsageReportingEnabled\x18\t \x01(\bR\x1bglobalUsageReportingEnabled\x1a\xd0\x01\n" +
	"\x10PortConfigRecord\x12\x1a\n" +
	"\bintfName\x18\x01 \x02(\tR\bintfName\x12\x1a\n" +
	"\bswitchId\x18\x02 \x02(\rR\bswitchId\x12\x16\n" +
	"\x06portId\x18\x03 \x02(\rR\x06portId\x12\"\n" +
	"\finternalPort\x18\x04 \x02(\bR\finternalPort\x12$\n" +
	"\rhighThreshold\x18\x05 \x02(\rR\rhighThreshold\x12\"\n" +
	"\flowThreshold\x18\x06 \x02(\rR\flowThreshold\"\xee\x01\n" +
	"\x17GlobalBufferUsageRecord\x12M\n" +
	"\tentryType\x18\x01 \x01(\x0e2/.LanzProtobuf.GlobalBufferUsageRecord.EntryTypeR\tentryType\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x04R\ttimestamp\x12\x1e\n" +
	"\n" +
	"bufferSize\x18\x03 \x01(\rR\n" +
	"bufferSize\x12\x1a\n" +
	"\bduration\x18\x04 \x01(\rR\bduration\"*\n" +
	"\tEntryType\x12\a\n" +
	"\x03LOW\x10\x01\x12\n" +
	"\n" +
	"\x06UPDATE\x10\x02\x12\b\n" +
	"\x04HIGH\x10\x03\"\xd8\x03\n" +
	"\x10CongestionRecord\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x02(\x04R\ttimestamp\x12\x1a\n" +
	"\bintfName\x18\x02 \x02(\tR\bintfName\x12\x1a\n" +
	"\bswitchId\x18\x03 \x02(\rR\bswitchId\x12\x16\n" +
	"\x06portId\x18\x04 \x02(\rR\x06portId\x12\x1c\n" +
	"\tqueueSize\x18\x05 \x02(\rR\tqueueSize\x12F\n" +
	"\tentryType\x18\x06 \x01(\x0e2(.LanzProtobuf.CongestionRecord.EntryTypeR\tentryType\x12\"\n" +
	"\ftrafficClass\x18\a \x01(\rR\ftrafficClass\x12$\n" +
	"\rtimeOfMaxQLen\x18\b \x01(\x04R\rtimeOfMaxQLen\x12\x1c\n" +
	"\ttxLatency\x18\t \x01(\rR\ttxLatency\x12\x1e\n" +
	"\n" +
	"qDropCount\x18\n" +
	" \x01(\rR\n" +
	"qDropCount\x12.\n" +
	"\x12fabricPeerIntfName\x18\v \x01(\tR\x12fabricPeerIntfName\"8\n" +
	"\tEntryType\x12\t\n" +
	"\x05START\x10\x01\x12\n" +
	"\n" +
	"\x06UPDATE\x10\x02\x12\a\n" +
	"\x03END\x10\x03\x12\v\n" +
	"\aPOLLING\x10\x04\"O\n" +
	"\vErrorRecord\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x02(\x04R\ttimestamp\x12\"\n" +
	"\ferrorMessage\x18\x02 \x02(\tR\ferrorMessage\"\xb6\x02\n" +
	"\n" +
	"LanzRecord\x12>\n" +
	"\fconfigRecord\x18\x01 \x01(\v2\x1a.LanzProtobuf.ConfigRecordR\fconfigRecord\x12J\n" +
	"\x10congestionRecord\x18\x02 \x01(\v2\x1e.LanzProtobuf.CongestionRecordR\x10congestionRecord\x12;\n" +
	"\verrorRecord\x18\x03 \x01(\v2\x19.LanzProtobuf.ErrorRecordR\verrorRecord\x12_\n" +
	"\x17globalBufferUsageRecord\x18\x04 \x01(\v2%.LanzProtobuf.GlobalBufferUsageRecordR\x17globalBufferUsageRecordB\aZ\x05proto"

var (
	file_lanz_proto_rawDescOnce sync.Once
	file_lanz_proto_rawDescData []byte
)

func file_lanz_proto_rawDescGZIP() []byte {
	file_lanz_proto_rawDescOnce.Do(func() {
		file_lanz_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_lanz_proto_rawDesc), len(file_lanz_proto_rawDesc)))
	})
	return file_lanz_proto_rawDescData
}

var file_lanz_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_lanz_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_lanz_proto_goTypes = []any{
	(GlobalBufferUsageRecord_EntryType)(0), // 0: LanzProtobuf.GlobalBufferUsageRecord.EntryType
	(CongestionRecord_EntryType)(0),        // 1: LanzProtobuf.CongestionRecord.EntryType
	(*ConfigRecord)(nil),                   // 2: LanzProtobuf.ConfigRecord
	(*GlobalBufferUsageRecord)(nil),        // 3: LanzProtobuf.GlobalBufferUsageRecord
	(*CongestionRecord)(nil),               // 4: LanzProtobuf.CongestionRecord
	(*ErrorRecord)(nil),                    // 5: LanzProtobuf.ErrorRecord
	(*LanzRecord)(nil),                     // 6: LanzProtobuf.LanzRecord
	(*ConfigRecord_PortConfigRecord)(nil),  // 7: LanzProtobuf.ConfigRecord.PortConfigRecord
}
var file_lanz_proto_depIdxs = []int32{
	7, // 0: LanzProtobuf.ConfigRecord.portConfigRecord:type_name -> LanzProtobuf.ConfigRecord.PortConfigRecord
	0, // 1: LanzProtobuf.GlobalBufferUsageRecord.entryType:type_name -> LanzProtobuf.GlobalBufferUsageRecord.EntryType
	1, // 2: LanzProtobuf.CongestionRecord.entryType:type_name -> LanzProtobuf.CongestionRecord.EntryType
	2, // 3: LanzProtobuf.LanzRecord.configRecord:type_name -> LanzProtobuf.ConfigRecord
	4, // 4: LanzProtobuf.LanzRecord.congestionRecord:type_name -> LanzProtobuf.CongestionRecord
	5, // 5: LanzProtobuf.LanzRecord.errorRecord:type_name -> LanzProtobuf.ErrorRecord
	3, // 6: LanzProtobuf.LanzRecord.globalBufferUsageRecord:type_name -> LanzProtobuf.GlobalBufferUsageRecord
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_lanz_proto_init() }
func file_lanz_proto_init() {
	if File_lanz_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_lanz_proto_rawDesc), len(file_lanz_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lanz_proto_goTypes,
		DependencyIndexes: file_lanz_proto_depIdxs,
		EnumInfos:         file_lanz_proto_enumTypes,
		MessageInfos:      file_lanz_proto_msgTypes,
	}.Build()
	File_lanz_proto = out.File
	file_lanz_proto_goTypes = nil
	file_lanz_proto_depIdxs = nil
}
